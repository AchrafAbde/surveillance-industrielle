from flask import Flask, request, jsonify
# Temporairement commenté pour tester
# from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
import os
import datetime
from dotenv import load_dotenv
from flask_socketio import SocketIO
from machine_learning import IsolationForestModel
from apscheduler.schedulers.background import BackgroundScheduler
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging
import random

# Configuration des logs
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.StreamHandler()])
logger = logging.getLogger('industrial_monitoring')

# Charger les variables d'environnement
load_dotenv()

# Récupérer les paramètres de configuration
DATA_UPDATE_INTERVAL = int(os.environ.get('DATA_UPDATE_INTERVAL', 10))
PREDICTION_THRESHOLD = int(os.environ.get('PREDICTION_THRESHOLD', 80))
EMERGENCY_STOP_THRESHOLD = int(os.environ.get('EMERGENCY_STOP_THRESHOLD', 95))
ENABLE_EMAIL_NOTIFICATIONS = os.environ.get('ENABLE_EMAIL_NOTIFICATIONS', 'false').lower() == 'true'
ENABLE_PUSH_NOTIFICATIONS = os.environ.get('ENABLE_PUSH_NOTIFICATIONS', 'false').lower() == 'true'

# Initialiser l'application
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-change-in-production')
app.config['JWT_SECRET_KEY'] = os.environ.get('JWT_SECRET_KEY', 'jwt-secret-change-in-production')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(hours=1)

# Initialiser les extensions
# jwt = JWTManager(app)  # Commenté pour éviter les conflits
from flask_cors import CORS
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# SOLUTION TEMPORAIRE: Créer un décorateur qui ne fait rien pour remplacer jwt_required
def jwt_required(optional=None):
    def wrapper(fn):
        return fn
    return wrapper

# Import des modèles et initialisation de la base de données
from database import init_db, get_database_uri, get_sensor_data_timeseries, get_anomaly_count_by_machine
from models import db, User, Machine, Sensor, SensorData, Alert

# Configurer et initialiser la base de données
app.config['SQLALCHEMY_DATABASE_URI'] = get_database_uri()
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialiser la base de données avec l'application Flask
db.init_app(app)

with app.app_context():
    db.create_all()
    
    # Import models here to avoid circular imports
    from models import User, Machine, Sensor
    
    # Check if we need to initialize with sample data
    if User.query.count() == 0:
        # Create an admin user
        admin = User(username='admin', name='Administrator', role='admin')
        admin.set_password('admin123')
        
        # Create a regular worker user
        worker = User(username='worker1', name='Worker One', role='worker')
        worker.set_password('worker123')
        
        db.session.add(admin)
        db.session.add(worker)
        
        # Add sample machines
        machine1 = Machine(
            machine_id='machine-001',
            name='Machine Alpha',
            description='Machine de production principale',
            status='active',
            type='production'
        )
        
        machine2 = Machine(
            machine_id='machine-002',
            name='Machine Beta',
            description='Machine de production secondaire',
            status='maintenance',
            type='production'
        )
        
        db.session.add(machine1)
        db.session.add(machine2)
        
        # Add default sensor types for machine 1
        temp_sensor = Sensor(
            machine_id=1,
            type='temperature',
            unit='°C',
            min_value=0,
            max_value=100
        )
        
        pressure_sensor = Sensor(
            machine_id=1,
            type='pressure',
            unit='bar',
            min_value=0,
            max_value=10
        )
        
        vibration_sensor = Sensor(
            machine_id=1,
            type='vibration',
            unit='Hz',
            min_value=0,
            max_value=200
        )
        
        db.session.add(temp_sensor)
        db.session.add(pressure_sensor)
        db.session.add(vibration_sensor)
        
        # Add sensors for machine 2
        temp_sensor2 = Sensor(
            machine_id=2,
            type='temperature',
            unit='°C',
            min_value=0,
            max_value=120
        )
        
        humidity_sensor = Sensor(
            machine_id=2,
            type='humidity',
            unit='%',
            min_value=0,
            max_value=100
        )
        
        db.session.add(temp_sensor2)
        db.session.add(humidity_sensor)
        
        # Commit the changes
        db.session.commit()
        logger.info("Base de données initialisée avec des données par défaut.")

# Dictionnaire pour stocker les états d'arrêt d'urgence
emergency_stops = {}

# Configurer le planificateur de tâches
scheduler = BackgroundScheduler()

# Fonction pour générer et envoyer des mises à jour de capteurs
def send_sensor_updates():
    with app.app_context():
        machines = Machine.query.filter_by(status='active').all()
        for machine in machines:
            # Pour chaque capteur de la machine
            for sensor in machine.sensors:
                # Générer une nouvelle valeur pour le capteur
                last_value = SensorData.query.filter_by(sensor_id=sensor.id).order_by(SensorData.timestamp.desc()).first()
                
                # Valeur par défaut si aucune donnée n'existe
                new_value = 50 if not last_value else last_value.value
                
                # Ajouter une variation aléatoire
                variation = random.uniform(-5, 5)
                new_value = max(0, min(sensor.max_value, new_value + variation))
                
                # Créer une nouvelle entrée de données
                timestamp = datetime.datetime.now()
                new_data = SensorData(
                    sensor_id=sensor.id,
                    value=new_value,
                    timestamp=timestamp
                )
                db.session.add(new_data)
                
                # Vérifier les anomalies
                prediction = anomaly_model.predict({
                    'machine_id': machine.id,
                    'sensor_type': sensor.type,
                    'value': new_value,
                    'timestamp': timestamp.isoformat()
                })
                
                # Si risque élevé, créer une alerte
                if prediction['risk_probability'] > PREDICTION_THRESHOLD:
                    # Vérifier si une alerte similaire existe déjà
                    existing_alert = Alert.query.filter_by(
                        machine_id=machine.id,
                        sensor_type=sensor.type,
                        status='active'
                    ).first()
                    
                    if not existing_alert:
                        alert = Alert(
                            machine_id=machine.id,
                            sensor_type=sensor.type,
                            value=new_value,
                            message=f"Risque détecté: {prediction['prediction']}",
                            risk_level=prediction['risk_probability'],
                            suggestions=','.join(prediction['suggestions']),
                            timestamp=timestamp
                        )
                        db.session.add(alert)
                        
                        # Notifier les clients connectés
                        alert_data = {
                            'machine_id': machine.machine_id,
                            'sensor_type': sensor.type,
                            'value': new_value,
                            'risk_level': prediction['risk_probability'],
                            'message': f"Risque détecté: {prediction['prediction']}",
                            'suggestions': prediction['suggestions'],
                            'timestamp': timestamp.isoformat(),
                            '_id': str(alert.id) if hasattr(alert, 'id') and alert.id else str(random.randint(1000, 9999))
                        }
                        socketio.emit('new_alert', alert_data)
                        
                        # Envoyer notification push si activé
                        if ENABLE_PUSH_NOTIFICATIONS:
                            send_push_notification(
                                title=f"Alerte machine {machine.name}",
                                body=f"{sensor.type}: {prediction['prediction']} (Risque: {prediction['risk_probability']}%)",
                                data=alert_data
                            )
                
                # Envoyer les données mises à jour aux clients abonnés
                sensor_data = {
                    'machine_id': machine.machine_id,
                    'sensor_type': sensor.type,
                    'value': new_value,
                    'unit': sensor.unit,
                    'timestamp': timestamp.isoformat()
                }
                socketio.emit('sensor_update', sensor_data, room=machine.machine_id)
                
                # Si la valeur est critique, arrêter d'urgence
                if prediction['risk_probability'] > EMERGENCY_STOP_THRESHOLD:
                    machine.status = 'emergency_stopped'
                    emergency_stops[machine.id] = {
                        'timestamp': timestamp.isoformat(),
                        'reason': f"Valeur critique du capteur {sensor.type}: {new_value} {sensor.unit}"
                    }
                    
                    # Notifier les clients
                    socketio.emit('emergency_stop', {
                        'machine_id': machine.machine_id,
                        'reason': emergency_stops[machine.id]['reason'],
                        'timestamp': emergency_stops[machine.id]['timestamp']
                    })
            
            # Envoyer aussi les prédictions mises à jour
            predictions_data = get_machine_predictions(machine.id)
            if predictions_data:
                socketio.emit('predictions_update', {
                    'machine_id': machine.machine_id,
                    'predictions': predictions_data
                }, room=machine.machine_id)
        
        # Commit les changements à la base de données
        db.session.commit()

# Fonction pour obtenir les prédictions pour une machine
def get_machine_predictions(machine_id):
    try:
        # Obtenir les données récentes des capteurs
        recent_data = []
        sensors = Sensor.query.filter_by(machine_id=machine_id).all()
        
        for sensor in sensors:
            # Récupérer les 10 dernières valeurs du capteur
            data_points = SensorData.query.filter_by(sensor_id=sensor.id).order_by(SensorData.timestamp.desc()).limit(10).all()
            
            if data_points:
                for point in data_points:
                    recent_data.append({
                        'machine_id': machine_id,
                        'sensor_type': sensor.type,
                        'value': point.value,
                        'timestamp': point.timestamp.isoformat()
                    })
        
        # Faire des prédictions pour chaque type de capteur
        predictions = {}
        for sensor in sensors:
            sensor_data = [d for d in recent_data if d['sensor_type'] == sensor.type]
            
            if sensor_data:
                # Prendre la dernière valeur pour prédiction
                last_data = sensor_data[0]
                prediction = anomaly_model.predict(last_data)
                
                predictions[sensor.type] = {
                    'risk_probability': prediction['risk_probability'],
                    'prediction': prediction['prediction'],
                    'suggestions': prediction['suggestions'],
                    'estimated_time': prediction.get('estimated_time', '15 minutes')
                }
        
        return predictions
    
    except Exception as e:
        logger.error(f"Erreur lors de la génération des prédictions: {str(e)}")
        return {}

# Fonction d'envoi de notifications push (à implémenter avec un service réel)
def send_push_notification(title, body, data=None):
    try:
        # Cette fonction est un placeholder pour l'implémentation d'un service réel
        # comme Firebase Cloud Messaging, OneSignal, etc.
        logger.info(f"Notification push envoyée: {title} - {body}")
        
        # Envoyer aussi par email si configuré
        if ENABLE_EMAIL_NOTIFICATIONS:
            send_email_notification(title, body)
            
    except Exception as e:
        logger.error(f"Erreur lors de l'envoi de notification push: {str(e)}")

# Planifier la tâche d'envoi de mises à jour
scheduler.add_job(
    send_sensor_updates, 
    'interval', 
    seconds=DATA_UPDATE_INTERVAL, 
    id='sensor_updates',
    replace_existing=True
)

# Démarrer le planificateur
scheduler.start()

# Fonction temporaire pour remplacer jwt_required
def fake_jwt_required():
    def decorator(f):
        def wrapper(*args, **kwargs):
            return f(*args, **kwargs)
        return wrapper
    return decorator

# Remplacer les fonctions de jwt_extended pour le test
# jwt_required = fake_jwt_required

def get_jwt_identity():
    return "admin"  # Temporairement utiliser admin comme identité

# Initialiser le modèle de détection d'anomalies
anomaly_model = IsolationForestModel()

# Si le modèle n'est pas encore entraîné, générer des données d'exemple et l'entraîner
if not anomaly_model.is_trained:
    logger.info("Entraînement du modèle d'IA sur des données générées...")
    sample_data = anomaly_model.generate_sample_training_data(n_samples=2000)
    anomaly_model.train(sample_data)
    logger.info("Modèle d'IA entraîné avec succès.")

# Routes d'authentification
@app.route('/api/login', methods=['POST'])
def login():
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    
    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400
    
    # Pour le développement, accepte "admin"/"admin123" directement
    if username == "admin" and password == "admin123":
        user = User.query.filter_by(username="admin").first()
        if user:
            # access_token = create_access_token(identity=username)
            return jsonify({
                # "token": access_token,
                "user": user.to_dict()
            }), 200
    
    # Rechercher l'utilisateur dans la base de données
    user = User.query.filter_by(username=username).first()
    
    if user and user.check_password(password):
        # access_token = create_access_token(identity=username)
        return jsonify({
            # "token": access_token,
            "user": user.to_dict()
        }), 200
    
    return jsonify({"error": "Nom d'utilisateur ou mot de passe incorrect"}), 401

# Route pour obtenir les informations de l'utilisateur
@app.route('/api/me', methods=['GET'])
@jwt_required()
def get_user_info():
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user).first()
    
    if not user:
        return jsonify({"error": "Utilisateur non trouvé"}), 404
    
    return jsonify(user.to_dict()), 200

# Routes des machines
@app.route('/api/machines', methods=['GET'])
@jwt_required()
def get_machines():
    machines = Machine.query.all()
    return jsonify([machine.to_dict() for machine in machines]), 200

@app.route('/api/machines/<machine_id>', methods=['GET'])
@jwt_required()
def get_machine(machine_id):
    machine = Machine.query.filter_by(machine_id=machine_id).first()
    
    if not machine:
        return jsonify({"error": "Machine non trouvée"}), 404
    
    # Récupérer les dernières valeurs des capteurs de cette machine
    machine_data = machine.to_dict()
    machine_data['sensors_data'] = {}
    
    sensors = Sensor.query.filter_by(machine_id=machine.id).all()
    for sensor in sensors:
        # Récupérer la dernière valeur du capteur
        last_data = SensorData.query.filter_by(sensor_id=sensor.id).order_by(SensorData.timestamp.desc()).first()
        if last_data:
            machine_data['sensors_data'][sensor.type] = {
                'value': last_data.value,
                'timestamp': last_data.timestamp.isoformat()
            }
    
    return jsonify(machine_data), 200

@app.route('/api/machines/<machine_id>/status', methods=['POST'])
@jwt_required()
def update_machine_status(machine_id):
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
        
    new_status = request.json.get('status', None)
    if not new_status:
        return jsonify({"error": "Missing status field"}), 400
        
    # Valider le statut
    valid_statuses = ['active', 'maintenance', 'offline', 'emergency_stop']
    if new_status not in valid_statuses:
        return jsonify({"error": f"Invalid status. Must be one of: {', '.join(valid_statuses)}"}), 400
    
    # Trouver la machine
    machine = Machine.query.filter_by(machine_id=machine_id).first()
    if not machine:
        return jsonify({"error": "Machine not found"}), 404
    
    # Mettre à jour le statut
    old_status = machine.status
    machine.status = new_status
    db.session.commit()
    
    # Si la machine passe de emergency_stop à active, réinitialiser le drapeau d'arrêt d'urgence
    if old_status == 'emergency_stop' and new_status == 'active':
        if machine_id in emergency_stops:
            emergency_stops[machine_id] = False
    
    # Notifier les clients connectés du changement de statut
    socketio.emit('machine_status_update', {
        'machine_id': machine_id,
        'status': new_status,
        'timestamp': datetime.datetime.now().isoformat()
    })
    
    return jsonify({"message": f"Machine status updated to '{new_status}'"}), 200

# Route pour recevoir les données des capteurs
@app.route('/api/sensor-data', methods=['POST'])
def receive_sensor_data():
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    data = request.json
    
    # Valider les données
    required_fields = ['machine_id', 'sensor_type', 'value']
    for field in required_fields:
        if field not in data:
            return jsonify({"error": f"Missing {field} field"}), 400
    
    # Trouver la machine
    machine = Machine.query.filter_by(machine_id=data['machine_id']).first()
    if not machine:
        return jsonify({"error": "Machine not found"}), 404
    
    # Si la machine est en arrêt d'urgence, rejeter les données
    if machine.status == 'emergency_stop':
        return jsonify({"error": "Machine is in emergency stop state"}), 403
    
    # Trouver le capteur
    sensor = Sensor.query.filter_by(machine_id=machine.id, type=data['sensor_type']).first()
    if not sensor:
        # Créer le capteur s'il n'existe pas
        sensor = Sensor(machine_id=machine.id, type=data['sensor_type'])
        db.session.add(sensor)
        db.session.commit()
    
    # Créer l'entrée de données
    sensor_data = SensorData(
        sensor_id=sensor.id,
        value=data['value']
    )
    
    db.session.add(sensor_data)
    
    # Vérifier les anomalies avec notre modèle d'IA
    prediction_result = anomaly_model.predict(data)
    
    # Si c'est une anomalie et que la probabilité dépasse le seuil
    if prediction_result['anomaly'] and prediction_result['risk_probability'] >= PREDICTION_THRESHOLD:
        # Créer une alerte
        alert = Alert(
            machine_id=machine.id,
            sensor_id=sensor.id,
            value=data['value'],
            status='active'
        )
        
        db.session.add(alert)
        
        # Émettre l'alerte via socketio
        alert_data = {
            'id': alert.id,
            'machine_id': machine.machine_id,
            'sensor_type': sensor.type,
            'value': data['value'],
            'timestamp': datetime.datetime.now().isoformat(),
            'risk_probability': prediction_result['risk_probability'],
            'suggestions': prediction_result['suggestions'],
            'prediction': prediction_result['prediction']
        }
        
        socketio.emit('new_alert', alert_data)
        
        # Si la probabilité dépasse le seuil d'arrêt d'urgence
        if prediction_result['risk_probability'] >= EMERGENCY_STOP_THRESHOLD:
            # Effectuer un arrêt d'urgence automatique
            machine.status = 'emergency_stop'
            emergency_stops[machine.machine_id] = True
            
            # Émettre l'événement d'arrêt d'urgence
            socketio.emit('emergency_stop', {
                'machine_id': machine.machine_id,
                'reason': f"Arrêt d'urgence automatique: {sensor.type} anormal ({data['value']})",
                'timestamp': datetime.datetime.now().isoformat()
            })
            
            # Envoyer une notification
            send_email_notification(
                f"URGENT: Arrêt d'urgence pour {machine.name}",
                f"La machine {machine.name} ({machine.machine_id}) a été arrêtée automatiquement.\n"
                f"Capteur: {sensor.type}\n"
                f"Valeur: {data['value']}\n"
                f"Probabilité de risque: {prediction_result['risk_probability']}%\n"
                f"Suggestions: {', '.join(prediction_result['suggestions'])}"
            )
    
    # Émettre les données du capteur via socketio
    socketio.emit('sensor_update', {
        'machine_id': machine.machine_id,
        'sensor_type': sensor.type,
        'value': data['value'],
        'timestamp': datetime.datetime.now().isoformat()
    })
    
    db.session.commit()
    
    return jsonify({
        "message": "Données reçues", 
        "is_anomaly": prediction_result['anomaly'], 
        "risk_probability": prediction_result['risk_probability'],
        "suggestions": prediction_result['suggestions'] if prediction_result['anomaly'] else []
    }), 201

# Route pour obtenir les données des capteurs
@app.route('/api/sensor-data/<machine_id>', methods=['GET'])
@jwt_required()
def get_sensor_data(machine_id):
    # Paramètres de requête
    sensor_type = request.args.get('sensor_type')
    limit = int(request.args.get('limit', 100))
    start_time = request.args.get('start_time')
    end_time = request.args.get('end_time')
    interval = request.args.get('interval')
    
    # Trouver la machine
    machine = Machine.query.filter_by(machine_id=machine_id).first()
    if not machine:
        return jsonify({"error": "Machine non trouvée"}), 404
    
    # Si un intervalle est spécifié, utiliser l'agrégation de séries temporelles
    if interval:
        if not sensor_type:
            return jsonify({"error": "sensor_type parameter is required when using interval"}), 400
            
        timeseries_data = get_sensor_data_timeseries(
            machine_id=machine_id,
            sensor_type=sensor_type,
            start_time=start_time,
            end_time=end_time,
            interval=interval
        )
        
        # Convertir le DataFrame pandas en liste de dictionnaires
        if timeseries_data.empty:
            return jsonify([]), 200
            
        # Détecter si nous avons une colonne 'timestamp' (cas du DataFrame remis à zéro)
        if 'timestamp' in timeseries_data.columns:
            result = timeseries_data.to_dict(orient='records')
        else:
            # Cas où l'index est toujours le timestamp
            result = timeseries_data.reset_index().to_dict(orient='records')
            
        return jsonify(result), 200
    
    # Sinon, requête standard pour les données brutes
    # Requête de base
    query = db.session.query(SensorData).join(Sensor).filter(Sensor.machine_id == machine.id)
    
    # Filtrer par type de capteur si nécessaire
    if sensor_type:
        query = query.filter(Sensor.type == sensor_type)
    
    # Filtrer par plage de temps si nécessaire
    if start_time:
        query = query.filter(SensorData.timestamp >= start_time)
    if end_time:
        query = query.filter(SensorData.timestamp <= end_time)
    
    # Obtenir les données les plus récentes
    data = query.order_by(SensorData.timestamp.desc()).limit(limit).all()
    
    # Renvoyer les données
    return jsonify([item.to_dict() for item in data]), 200

# Routes des alertes
@app.route('/api/alerts', methods=['GET'])
@jwt_required()
def get_alerts():
    # Paramètres de requête
    status = request.args.get('status')
    machine_id = request.args.get('machine_id')
    limit = int(request.args.get('limit', 100))
    
    # Requête de base
    query = Alert.query
    
    # Filtrer par statut si nécessaire
    if status:
        query = query.filter(Alert.status == status)
    
    # Filtrer par machine si nécessaire
    if machine_id:
        machine = Machine.query.filter_by(machine_id=machine_id).first()
        if machine:
            query = query.filter(Alert.machine_id == machine.id)
    
    # Obtenir les alertes les plus récentes
    alerts = query.order_by(Alert.timestamp.desc()).limit(limit).all()
    
    # Renvoyer les alertes
    return jsonify([alert.to_dict() for alert in alerts]), 200

@app.route('/api/alerts/<int:alert_id>/resolve', methods=['POST'])
@jwt_required()
def resolve_alert(alert_id):
    # Récupérer l'utilisateur actuel
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user).first()
    
    if not user:
        return jsonify({"error": "Utilisateur non trouvé"}), 404
    
    # Récupérer l'alerte
    alert = Alert.query.get(alert_id)
    if not alert:
        return jsonify({"error": "Alerte non trouvée"}), 404
    
    # Vérifier si l'alerte est déjà résolue
    if alert.status == 'resolved':
        return jsonify({"message": "Cette alerte est déjà résolue"}), 400
    
    # Résoudre l'alerte
    alert.status = 'resolved'
    alert.resolved_by = user.id
    alert.resolved_at = datetime.datetime.now()
    
    db.session.commit()
    
    # Notifier les clients connectés
    socketio.emit('alert_resolved', {
        'alert_id': alert.id,
        'resolved_by': user.username,
        'resolved_at': alert.resolved_at.isoformat()
    })
    
    return jsonify({
        "message": "Alerte résolue avec succès",
        "alert": alert.to_dict()
    }), 200

@app.route('/api/emergency-stop/<machine_id>', methods=['POST'])
@jwt_required()
def emergency_stop(machine_id):
    # Récupérer l'utilisateur actuel
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user).first()
    
    if not user:
        return jsonify({"error": "Utilisateur non trouvé"}), 404
    
    # Récupérer la machine
    machine = Machine.query.filter_by(machine_id=machine_id).first()
    if not machine:
        return jsonify({"error": "Machine non trouvée"}), 404
    
    # Vérifier si la machine est déjà en arrêt d'urgence
    if machine.status == 'emergency_stop':
        return jsonify({"message": "Cette machine est déjà en arrêt d'urgence"}), 400
    
    # Récupérer la raison de l'arrêt (optionnel)
    reason = "Arrêt d'urgence manuel"
    if request.is_json:
        reason = request.json.get('reason', reason)
    
    # Mettre la machine en arrêt d'urgence
    machine.status = 'emergency_stop'
    emergency_stops[machine.machine_id] = True
    
    db.session.commit()
    
    # Notifier les clients connectés
    socketio.emit('emergency_stop', {
        'machine_id': machine.machine_id,
        'reason': reason,
        'initiated_by': user.username,
        'timestamp': datetime.datetime.now().isoformat()
    })
    
    # Envoyer une notification
    send_email_notification(
        f"URGENT: Arrêt d'urgence pour {machine.name}",
        f"La machine {machine.name} ({machine.machine_id}) a été arrêtée d'urgence par {user.username}.\n"
        f"Raison: {reason}"
    )
    
    logger.warning(f"ARRÊT D'URGENCE MANUEL pour {machine.name} ({machine.machine_id}) par {user.username}")
    
    return jsonify({
        "message": "Arrêt d'urgence effectué avec succès",
        "machine": machine.to_dict()
    }), 200

@app.route('/api/predictions/<machine_id>', methods=['GET'])
@jwt_required()
def get_predictions(machine_id):
    # Trouver la machine
    machine = Machine.query.filter_by(machine_id=machine_id).first()
    if not machine:
        return jsonify({"error": "Machine non trouvée"}), 404
    
    # Récupérer tous les capteurs pour cette machine
    sensors = Sensor.query.filter_by(machine_id=machine.id).all()
    
    predictions = {}
    
    for sensor in sensors:
        # Récupérer les données récentes pour ce capteur (dernières 20 mesures)
        recent_data = SensorData.query.filter_by(sensor_id=sensor.id).order_by(SensorData.timestamp.desc()).limit(20).all()
        
        if len(recent_data) < 5:  # Pas assez de données pour prédire
            continue
        
        # Préparer les données pour le détecteur d'anomalies
        data = {
            'machine_id': machine.machine_id,
            'sensor_type': sensor.type,
            'value': recent_data[0].value
        }
        
        # Obtenir la prédiction
        prediction_result = anomaly_model.predict(data)
        
        # Si la prédiction contient des informations futures
        if prediction_result['prediction']:
            predictions[sensor.type] = {
                'current_value': recent_data[0].value,
                'future_value': prediction_result['prediction']['future_value'],
                'time_to_threshold': prediction_result['prediction']['time_to_threshold'],
                'message': prediction_result['prediction']['message'],
                'risk_probability': prediction_result['risk_probability'],
                'suggestions': prediction_result['suggestions']
            }
    
    return jsonify({
        'machine_id': machine.machine_id,
        'predictions': predictions
    }), 200

@app.route('/api/status', methods=['GET'])
def server_status():
    # Vérifier l'état du serveur et ses connexions
    status = {
        'server': 'online',
        'database': 'connected',
        'time': datetime.datetime.now().isoformat(),
        'uptime': int(time.time() - scheduler._start_time) if hasattr(scheduler, '_start_time') else 0,
        'active_machines': Machine.query.filter_by(status='active').count(),
        'total_machines': Machine.query.count(),
        'active_alerts': Alert.query.filter_by(status='active').count(),
        'connected_clients': 0,  # Ce nombre sera actualisé par socketio
        'db_type': os.environ.get('DB_TYPE', 'sqlite')
    }
    
    return jsonify(status), 200

# Socket.IO événements
@socketio.on('connect')
def handle_connect():
    logger.info(f"Client connecté: {request.sid}")
    socketio.emit('welcome', {
        'message': 'Connecté au serveur de surveillance industrielle',
        'timestamp': datetime.datetime.now().isoformat(),
        'update_interval': DATA_UPDATE_INTERVAL
    })

@socketio.on('disconnect')
def handle_disconnect():
    logger.info(f"Client déconnecté: {request.sid}")

@socketio.on('subscribe')
def handle_subscribe(data):
    machine_id = data.get('machine_id')
    if machine_id:
        # Rejoindre la salle spécifique à cette machine
        for room in socketio.rooms(request.sid):
            if room != request.sid:
                socketio.leave_room(room)
        socketio.join_room(machine_id)
        logger.info(f"Client {request.sid} abonné à la machine {machine_id}")
        
        # Envoyer l'état actuel de la machine
        machine = Machine.query.filter_by(machine_id=machine_id).first()
        if machine:
            socketio.emit('machine_status', {
                'machine_id': machine.machine_id,
                'status': machine.status,
                'timestamp': datetime.datetime.now().isoformat()
            }, room=request.sid)
    else:
        # Si pas de machine_id, s'abonner à toutes les mises à jour
        logger.info(f"Client {request.sid} abonné à toutes les mises à jour")

@socketio.on('unsubscribe')
def handle_unsubscribe(data):
    machine_id = data.get('machine_id')
    if machine_id:
        socketio.leave_room(machine_id)
        logger.info(f"Client {request.sid} désabonné de la machine {machine_id}")

if __name__ == '__main__':
    print("Démarrage du serveur d'API pour le Système de Surveillance Industrielle...")
    print("API disponible sur http://localhost:5000")
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=(os.environ.get('FLASK_ENV') == 'development'))
    except KeyboardInterrupt:
        logger.info("Arrêt du serveur...")
        scheduler.shutdown()
        print("Serveur arrêté.")
    except Exception as e:
        logger.error(f"Erreur lors du démarrage du serveur: {str(e)}")
        scheduler.shutdown()
        print(f"Erreur: {str(e)}")
